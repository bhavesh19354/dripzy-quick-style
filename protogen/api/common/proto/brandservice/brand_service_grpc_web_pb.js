/**
 * @fileoverview gRPC-Web generated client stub for api.common.proto.brandservice
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.2
// source: api/common/proto/brandservice/brand_service.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var api_common_proto_brand_pb = require('../../../../api/common/proto/brand_pb.js')

var api_common_proto_header_pb = require('../../../../api/common/proto/header_pb.js')
const proto = {};
proto.api = {};
proto.api.common = {};
proto.api.common.proto = {};
proto.api.common.proto.brandservice = require('./brand_service_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.api.common.proto.brandservice.BrandServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.api.common.proto.brandservice.BrandServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.common.proto.brandservice.GetBrandRequest,
 *   !proto.api.common.proto.brandservice.GetBrandResponse>}
 */
const methodDescriptor_BrandService_GetBrand = new grpc.web.MethodDescriptor(
  '/api.common.proto.brandservice.BrandService/GetBrand',
  grpc.web.MethodType.UNARY,
  proto.api.common.proto.brandservice.GetBrandRequest,
  proto.api.common.proto.brandservice.GetBrandResponse,
  /**
   * @param {!proto.api.common.proto.brandservice.GetBrandRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.api.common.proto.brandservice.GetBrandResponse.deserializeBinary
);


/**
 * @param {!proto.api.common.proto.brandservice.GetBrandRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.api.common.proto.brandservice.GetBrandResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.api.common.proto.brandservice.GetBrandResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.api.common.proto.brandservice.BrandServiceClient.prototype.getBrand =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.common.proto.brandservice.BrandService/GetBrand',
      request,
      metadata || {},
      methodDescriptor_BrandService_GetBrand,
      callback);
};


/**
 * @param {!proto.api.common.proto.brandservice.GetBrandRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.api.common.proto.brandservice.GetBrandResponse>}
 *     Promise that resolves to the response
 */
proto.api.common.proto.brandservice.BrandServicePromiseClient.prototype.getBrand =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.common.proto.brandservice.BrandService/GetBrand',
      request,
      metadata || {},
      methodDescriptor_BrandService_GetBrand);
};


module.exports = proto.api.common.proto.brandservice;

